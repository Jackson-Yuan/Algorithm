/**
小明被劫持到X赌城，被迫与其他3人玩牌。一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。这时，小明脑子里突然冒出一个问题：如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？
请填写该整数，不要填写任何多余的内容或说明文字。
*/
#include<iostream>
#include<stdio.h>

using namespace std;
int num[14];
int count;

void dfs(int index, int sum) {
    if (sum > 13) return;//剪枝
    if (index == 13) {
        if (sum == 13) count++;
        return;
    }
    for (int i = 0; i <= 4; i++) {
        dfs(index + 1, sum + i);
    }
}

int main() {
    count = 0;
    dfs(0, 0);
    cout << count << endl;
}
/**
扑克牌 13种点数 每个点数4张
一共要拿13张
在不考虑花色，只考虑点数的情况下
本想利用搜索枚举13个牌的位置进行计算 发现几乎不好实现 每个牌都有4次机会可以拿 并且不考虑拿的顺序 枚举量首先很大 还要去重(如果剪枝也不太好做) 肯定会超时 
不妨换个思路 反正13种点数 每种点数可拿 0 ~ 4张 枚举13种点数的 0 ~ 4张情况  利用sum变量保存总个数 大于13 起到剪枝效果 
*/ 
