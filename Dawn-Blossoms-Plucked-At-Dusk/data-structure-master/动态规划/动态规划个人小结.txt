动态规划与贪心 本质上都是从局部最优解推出最优解
贪心是动态规划的特例
但动态规划与贪心的区别在于
贪心每一步的解一定来自于上一步的解
动态规划的每一步的解却不一定是上一步的解 可能是之前某个局部最优解(所以需要保存之前的局部最优解， 通常用数组) 所以通过状态转移方程来迭代出最优解(当然迭代方式具体情况具体分析 详见苹果.cpp两者迭代方式)

至于如何将问题迭代(即转移方程的推导) 一般都采用逆向思维 反推 如果要得到最后结果 需要依靠哪些局部最优解来进行迭代
递推式的推导(即迭代)有时是比较(苹果.cpp) 有时候类似于找规律(超级台阶.cpp与铺地砖.cpp)
当然动态规划数组的含义(或状态)也至关重要 必须根据含义才能推导出状态转移方程


动态规划的状态转移方程是重中之重 转移方程务必与题意相符(详见纸币问题 与 开心的金明错误代码)
同时由于是递推式 必须有一定的初值 称之为边界

动态规划完美体现了 大事化小 小事化了的的精神 通过划分子问题 得出递推式 来求得最后的解 划分子问题便是体现出难易的差别的主要内容
